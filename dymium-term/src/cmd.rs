//! Terminal commands

use std::ops::Range;

/// All terminal commands that can be represented
///
/// This type exists only so that there's a unified place for all the various terminal commands. As
/// such, it is marked non-exhaustive, so that we may add more fields to it without necessitating a
/// major version bump.
#[non_exhaustive]
pub enum Command {
    /// Set the current style
    ///
    /// Resetting all styles is accomplished by `SetStyle(Style::default())`.
    SetStyle(crate::Style),

    /// Moves or otherwise interacts with the cursor
    Cursor(CursorCommand),
    /// Scrolls the contents of the screen
    Scroll(ScrollCommand),

    /// Erases a region of the screen
    Erase(EraseCommand),
}

/// A command that moves the cursor
pub enum CursorCommand {
    /// Move the cursor the given X and Y coordinates
    ///
    /// The top-left corner is the coordinate (0, 0). If the value for either `x` or `y` is `None`,
    /// then the cursor will not be moved along that axis.
    #[allow(missing_docs)]
    MoveTo { x: Option<u16>, y: Option<u16> },

    /// Moves the cursor relative to its current position
    ///
    /// The positive X and Y directions are rightwards and downwards, respectively.
    ///
    /// If either of `x` or `y` are zero, the escape sequences generated by the command will be
    /// automatically shortened to only output what is needed.
    #[allow(missing_docs)]
    MoveRelative { x: i16, y: i16 },

    /// Move the cursor to the bottom-left corner of the screen
    MoveToBottomLeft,

    /// Saves the cursor's current position
    ///
    /// The cursor can be moved back to a previously-saved position with `RestorePosition`.
    SavePosition,

    /// Restores a previously saved position
    ///
    /// The position must have been saved with `SavePosition` before it can be restored by this
    /// command.
    RestorePosition,
}

/// A command that scrolls the contents of the screen
pub enum ScrollCommand {
    /// Scrolls the entire screen by the given amount
    #[allow(missing_docs)]
    FullScreen { amount: i16 },

    /// Scrolls a region of the screen by the given amount
    #[allow(missing_docs)]
    Bounded { y_range: Range<u16>, amount: i16 },
}

/// A command that erases part of the screen
pub enum EraseCommand {}
